import os
import time
import asyncio
import nest_asyncio
from fastapi import FastAPI
from pyrogram import Client, filters
from pyrogram.types import Message
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options

# FastAPI instance
app = FastAPI()

# Enable asyncio patching for Pyrogram
nest_asyncio.apply()

# Bot credentials (‡§á‡§®‡•ç‡§π‡•á‡§Ç environment variables ‡§∏‡•á ‡§≠‡•Ä ‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç)
API_ID = int(os.getenv("API_ID", "28590286"))
API_HASH = os.getenv("API_HASH", "6a68cc6b41219dc57b7a52914032f92f")
BOT_TOKEN = os.getenv("BOT_TOKEN", "7412939071:AAFgfHJGhMXw9AuGAAnPuGk_LbAlB5kX2KY")

# ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§´‡•ã‡§≤‡•ç‡§°‡§∞
DOWNLOAD_DIR = "./downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# ‡§ó‡•ç‡§≤‡•ã‡§¨‡§≤ Chrome driver instance
driver = None

# Pyrogram Client initialization
bot = Client(
    "jnvu_result_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
@bot.on_message(filters.command("start"))
async def start_handler(client: Client, message: Message):
    global driver
    await message.reply("üîÑ Launching browser session...")

    if driver is None:
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_experimental_option("prefs", {
            "download.default_directory": os.path.abspath(DOWNLOAD_DIR),
            "download.prompt_for_download": False,
            "download.directory_upgrade": True,
            "plugins.always_open_pdf_externally": True
        })

        chromedriver_path = os.getenv("CHROMEDRIVER_PATH", "/usr/local/bin/chromedriver")

        driver = webdriver.Chrome(
            service=Service(chromedriver_path),
            options=chrome_options
        )

        # JNVU ‡§∞‡§ø‡§ú‡§≤‡•ç‡§ü ‡§™‡•á‡§ú ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Ç (‡§Ø‡§π ‡§≤‡§ø‡§Ç‡§ï ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ã‡§° ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§π‡•à, ‡§á‡§∏‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§Ö‡§ó‡§∞ ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§ ‡§π‡•ã)
        driver.get("https://share.google/RiGoUdAWQEkczypqg")
        time.sleep(2)
        # ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è XPATHs ‡§Ü‡§™‡§ï‡•á ‡§µ‡•á‡§¨‡§™‡•á‡§ú ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§π‡•à‡§Ç, ‡§á‡§®‡•ç‡§π‡•á‡§Ç ‡§ö‡•á‡§ï ‡§ï‡§∞ ‡§≤‡•á‡§Ç
        driver.find_element(By.XPATH, "/html/body/form/div[3]/div/div[1]/fieldset/div/div[1]/div/div[1]/table/tbody/tr[2]/td/div/div/ul/li[1]/span[3]/a").click()
        time.sleep(2)
        driver.find_element(By.XPATH, "/html/body/form/div[3]/div/div/fieldset/div/div[3]/div/div/div/table/tbody/tr[2]/td/div/ul/div/table/tbody/tr[2]/td[2]/span[1]/a").click()
        time.sleep(2)

        await message.reply("‚úÖ Bot is ready! ‡§Ö‡§¨ ‡§Ö‡§™‡§®‡§æ ‡§∞‡•ã‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡•à‡§∏‡•á `25rba00299`‡•§")

# ‡§∞‡•ã‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§π‡•à‡§Ç‡§°‡§≤‡§ø‡§Ç‡§ó (‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ú‡•ã /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç)
@bot.on_message(filters.text & filters.private & ~filters.command(["start"]))
async def handle_roll_number(client: Client, message: Message):
    global driver
    roll_number = message.text.strip()

    # ‡§∞‡•ã‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
    if not (6 <= len(roll_number) <= 15 and roll_number.isalnum()):
        await message.reply("‚ö†Ô∏è Invalid roll number format. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§õ‡•ã‡§ü‡•á ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∞‡•ã‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§≠‡•á‡§ú‡•á‡§Ç ‡§ú‡•à‡§∏‡•á `25rba00299`‡•§")
        return

    if driver is None:
        await message.reply("‚ö†Ô∏è Browser session initialized ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á /start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§≠‡•á‡§ú‡•á‡§Ç‡•§")
        return

    try:
        # ‡§™‡•Å‡§∞‡§æ‡§®‡•á PDF ‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç
        for f in os.listdir(DOWNLOAD_DIR):
            if f.endswith(".pdf"):
                os.remove(os.path.join(DOWNLOAD_DIR, f))

        # ‡§∞‡•ã‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§á‡§®‡§™‡•Å‡§ü ‡§ï‡§∞‡•á‡§Ç
        input_field = driver.find_element(By.XPATH, "/html/body/form/div[4]/div/div[2]/table/tbody/tr/td[2]/span/input")
        input_field.clear()
        input_field.send_keys(roll_number)
        time.sleep(1)

        # ‡§´‡•â‡§∞‡•ç‡§Æ ‡§∏‡§¨‡§Æ‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç
        driver.find_element(By.XPATH, "/html/body/form/div[4]/div/div[3]/span[1]/input").click()
        time.sleep(3)

        # PDF ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
        pdf_path = None
        for _ in range(5):
            pdf_files = [f for f in os.listdir(DOWNLOAD_DIR) if f.endswith(".pdf")]
            if pdf_files:
                pdf_path = os.path.join(DOWNLOAD_DIR, pdf_files[0])
                break
            time.sleep(1)

        if pdf_path and os.path.exists(pdf_path):
            driver.refresh()
            time.sleep(2)
            await message.reply_document(pdf_path, caption=f"‚úÖ Result PDF for `{roll_number}`")
        else:
            await message.reply("‚ùå PDF ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∞‡•ã‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§")

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è Error: `{str(e)}`")

# FastAPI ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü‡§Ö‡§™ ‡§™‡§∞ ‡§¨‡•ã‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(bot.start())

# Render ‡§Ø‡§æ ‡§Ö‡§®‡•ç‡§Ø ‡§∏‡§∞‡•ç‡§µ‡§ø‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•á‡§≤‡•ç‡§• ‡§ö‡•á‡§ï API
@app.get("/")
def read_root():
    return {"status": "JNVU Result Bot is running"}
